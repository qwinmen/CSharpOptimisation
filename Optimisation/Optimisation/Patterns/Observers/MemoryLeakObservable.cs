/*
 * Паттерн Наблюдатель (Observer)
 * Наблюдатель уведомляет все заинтересованные стороны о произошедшем событии
 * или об изменении своего состояния.
 * Реализация возможна при помощи:
 * - делегатов (методоы обратного вызова)
 * - событий
 * - специализированных интерфейсов наблюдателей
 * - интерфейсов IObserver\IObservable
 */

using System;

namespace Optimisation.Patterns.Observers
{
	/*
	 * Долгоживущие наблюдаемые обьекты являются наиболее распространенной причиной
	 * утечки памяти в .Net приложениях. Поскольку наблюдаемый обьект содержит неявную ссылку на все наблюдатели,
	 * то пока обьект наблюдения жив, будут живы и наблюдатели.
	 * Есть несколько способов обхода проблемы:
	 * - стоит избегать долгоживущих обьектов, а темболее с событиями внутри.
	 * - наблюдатели могут реализовывать интерфейс IDisposable, и отписываться от событий в методе Dispose().
	 * - пользоваться слабыми событиями (Weak Event Pattern).
	 */
	class Singleton
	{
		public static Singleton Instance { get; } = new Singleton();

		public event EventHandler Event;
	}

	class MemoryLeakObservable
	{
		//Создание обьекта MemoryLeakObservable гарантированно приведет к утечке памяти, поскольку
		//вновь созданный экземпляр навсегда останется в списке подписчиков события Singleton.Instance.Even
		public MemoryLeakObservable()
		{
			Singleton.Instance.Event += (s, e) => Console.WriteLine("Memory leak.");
		}
	}
}
